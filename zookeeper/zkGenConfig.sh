#!/usr/bin/env bash
# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ZOO_USER=${ZOO_USER:-"zookeeper"}
ZOO_LOG_LEVEL=${ZOO_LOG_LEVEL:-"INFO"}
ZOO_DATA_DIR=${ZOO_DATA_DIR:-"/var/lib/zookeeper/data"}
ZOO_DATA_LOG_DIR=${ZOO_DATA_LOG_DIR:-"/var/lib/zookeeper/log"}
ZOO_LOG_DIR=${ZOO_LOG_DIR:-"var/log/zookeeper"}
ZOO_CONF_DIR=${ZOO_CONF_DIR:-"/opt/zookeeper/conf"}
ZOO_PORT=${ZOO_PORT:-2181}
ZOO_SERVER_PORT=${ZOO_SERVER_PORT:-2888}
ZOO_ELECTION_PORT=${ZOO_ELECTION_PORT:-3888}
ZOO_TICK_TIME=${ZOO_TICK_TIME:-2000}
ZOO_INIT_LIMIT=${ZOO_INIT_LIMIT:-10}
ZOO_SYNC_LIMIT=${ZOO_SYNC_LIMIT:-5}
ZOO_HEAP_SIZE=${ZOO_HEAP_SIZE:-2G}
ZOO_MAX_CLIENT_CNXNS=${ZOO_MAX_CLIENT_CNXNS:-60}
ZOO_MIN_SESSION_TIMEOUT=${ZOO_MIN_SESSION_TIMEOUT:- $((ZOO_TICK_TIME*2))}
ZOO_MAX_SESSION_TIMEOUT=${ZOO_MAX_SESSION_TIMEOUT:- $((ZOO_TICK_TIME*20))}
ZOO_SNAP_RETAIN_COUNT=${ZOO_SNAP_RETAIN_COUNT:-3}
ZOO_PURGE_INTERVAL=${ZOO_PURGE_INTERVAL:-0}
ID_FILE="$ZOO_DATA_DIR/myid"
ZOO_CONFIG_FILE="$ZOO_CONF_DIR/zoo.cfg"
LOGGER_PROPS_FILE="$ZOO_CONF_DIR/log4j.properties"
JAVA_ENV_FILE="$ZOO_CONF_DIR/java.env"
HOST=`hostname -s`
DOMAIN=`hostname -d`

function print_servers() {
    for (( i=1; i<=$ZOO_REPLICAS; i++ ))
    do
        echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZOO_SERVER_PORT:$ZOO_ELECTION_PORT"
    done
}

function validate_env() {
    echo "Validating environment"

    if [ -z $ZOO_REPLICAS ]; then
        echo "ZOO_REPLICAS is a mandatory environment variable"
        exit 1
    fi

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Failed to extract ordinal from hostname $HOST"
        exit 1
    fi

    MY_ID=$((ORD+1))
    echo "ZOO_REPLICAS=$ZOO_REPLICAS"
    echo "MY_ID=$MY_ID"
    echo "ZOO_LOG_LEVEL=$ZOO_LOG_LEVEL"
    echo "ZOO_DATA_DIR=$ZOO_DATA_DIR"
    echo "ZOO_DATA_LOG_DIR=$ZOO_DATA_LOG_DIR"
    echo "ZOO_LOG_DIR=$ZOO_LOG_DIR"
    echo "ZOO_PORT=$ZOO_PORT"
    echo "ZOO_SERVER_PORT=$ZOO_SERVER_PORT"
    echo "ZOO_ELECTION_PORT=$ZOO_ELECTION_PORT"
    echo "ZOO_TICK_TIME=$ZOO_TICK_TIME"
    echo "ZOO_INIT_LIMIT=$ZOO_INIT_LIMIT"
    echo "ZOO_SYNC_LIMIT=$ZOO_SYNC_LIMIT"
    echo "ZOO_MAX_CLIENT_CNXNS=$ZOO_MAX_CLIENT_CNXNS"
    echo "ZOO_MIN_SESSION_TIMEOUT=$ZOO_MIN_SESSION_TIMEOUT"
    echo "ZOO_MAX_SESSION_TIMEOUT=$ZOO_MAX_SESSION_TIMEOUT"
    echo "ZOO_HEAP_SIZE=$ZOO_HEAP_SIZE"
    echo "ZOO_SNAP_RETAIN_COUNT=$ZOO_SNAP_RETAIN_COUNT"
    echo "ZOO_PURGE_INTERVAL=$ZOO_PURGE_INTERVAL"
    echo "ENSEMBLE"
    print_servers
    echo "Environment validation successful"
}

function create_config() {
    rm -f $ZOO_CONFIG_FILE
    echo "Creating ZooKeeper configuration"
    echo "#This file was autogenerated by k8szk DO NOT EDIT" >> $ZOO_CONFIG_FILE
    echo "clientPort=$ZOO_PORT" >> $ZOO_CONFIG_FILE
    echo "dataDir=$ZOO_DATA_DIR" >> $ZOO_CONFIG_FILE
    echo "dataLogDir=$ZOO_DATA_LOG_DIR" >> $ZOO_CONFIG_FILE
    echo "tickTime=$ZOO_TICK_TIME" >> $ZOO_CONFIG_FILE
    echo "initLimit=$ZOO_INIT_LIMIT" >> $ZOO_CONFIG_FILE
    echo "syncLimit=$ZOO_SYNC_LIMIT" >> $ZOO_CONFIG_FILE
    echo "maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS" >> $ZOO_CONFIG_FILE
    echo "minSessionTimeout=$ZOO_MIN_SESSION_TIMEOUT" >> $ZOO_CONFIG_FILE
    echo "maxSessionTimeout=$ZOO_MAX_SESSION_TIMEOUT" >> $ZOO_CONFIG_FILE
    echo "autopurge.snapRetainCount=$ZOO_SNAP_RETAIN_COUNT" >> $ZOO_CONFIG_FILE
    echo "autopurge.purgeInteval=$ZOO_PURGE_INTERVAL" >> $ZOO_CONFIG_FILE

    if [ $ZOO_REPLICAS -gt 1 ]; then
        print_servers >> $ZOO_CONFIG_FILE
    fi

    echo "Wrote ZooKeeper configuration file to $ZOO_CONFIG_FILE"
}

function create_data_dirs() {
    echo "Creating ZooKeeper data directories and setting permissions"

    if [ ! -d $ZOO_DATA_DIR  ]; then
        mkdir -p $ZOO_DATA_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_DATA_DIR
    fi

    if [ ! -d $ZOO_DATA_LOG_DIR  ]; then
        mkdir -p $ZOO_DATA_LOG_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_DATA_LOG_DIR
    fi

    if [ ! -d $ZOO_LOG_DIR  ]; then
        mkdir -p $ZOO_LOG_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_LOG_DIR
    fi

    if [ ! -f $ID_FILE ]; then
        echo $MY_ID >> $ID_FILE
    fi

    echo "Created ZooKeeper data directories and set permissions in $ZOO_DATA_DIR"
}

function create_log_props () {
    rm -f $LOGGER_PROPS_FILE
    echo "Creating ZooKeeper log4j configuration"
    echo "zookeeper.root.logger=CONSOLE" >> $LOGGER_PROPS_FILE
    echo "zookeeper.console.threshold="$ZOO_LOG_LEVEL >> $LOGGER_PROPS_FILE
    echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOGGER_PROPS_FILE
    echo "Wrote log4j configuration to $LOGGER_PROPS_FILE"
}

function create_java_env() {
    rm -f $JAVA_ENV_FILE
    echo "Creating JVM configuration file"
    echo "ZOO_LOG_DIR=$ZOO_LOG_DIR" >> $JAVA_ENV_FILE
    echo "JVMFLAGS=\"-Xmx$ZOO_HEAP_SIZE -Xms$ZOO_HEAP_SIZE\"" >> $JAVA_ENV_FILE
    echo "Wrote JVM configuration to $JAVA_ENV_FILE"
}

validate_env && create_config && create_log_props && create_data_dirs && create_java_env
